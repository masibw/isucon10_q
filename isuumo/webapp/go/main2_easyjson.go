// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
  json "encoding/json"
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
  _ *json.RawMessage
  _ *jlexer.Lexer
  _ *jwriter.Writer
  _ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson(in *jlexer.Lexer, out *RecordMapper) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "Record":
      if in.IsNull() {
        in.Skip()
        out.Record = nil
      } else {
        in.Delim('[')
        if out.Record == nil {
          if !in.IsDelim(']') {
            out.Record = make([]string, 0, 4)
          } else {
            out.Record = []string{}
          }
        } else {
          out.Record = (out.Record)[:0]
        }
        for !in.IsDelim(']') {
          var v1 string
          v1 = string(in.String())
          out.Record = append(out.Record, v1)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson(out *jwriter.Writer, in RecordMapper) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"Record\":"
    out.RawString(prefix[1:])
    if in.Record == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v2, v3 := range in.Record {
        if v2 > 0 {
          out.RawByte(',')
        }
        out.String(string(v3))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecordMapper) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecordMapper) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecordMapper) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecordMapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson1(in *jlexer.Lexer, out *RangeCondition) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "prefix":
      out.Prefix = string(in.String())
    case "suffix":
      out.Suffix = string(in.String())
    case "ranges":
      if in.IsNull() {
        in.Skip()
        out.Ranges = nil
      } else {
        in.Delim('[')
        if out.Ranges == nil {
          if !in.IsDelim(']') {
            out.Ranges = make([]*Range, 0, 8)
          } else {
            out.Ranges = []*Range{}
          }
        } else {
          out.Ranges = (out.Ranges)[:0]
        }
        for !in.IsDelim(']') {
          var v4 *Range
          if in.IsNull() {
            in.Skip()
            v4 = nil
          } else {
            if v4 == nil {
              v4 = new(Range)
            }
            (*v4).UnmarshalEasyJSON(in)
          }
          out.Ranges = append(out.Ranges, v4)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson1(out *jwriter.Writer, in RangeCondition) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"prefix\":"
    out.RawString(prefix[1:])
    out.String(string(in.Prefix))
  }
  {
    const prefix string = ",\"suffix\":"
    out.RawString(prefix)
    out.String(string(in.Suffix))
  }
  {
    const prefix string = ",\"ranges\":"
    out.RawString(prefix)
    if in.Ranges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v5, v6 := range in.Ranges {
        if v5 > 0 {
          out.RawByte(',')
        }
        if v6 == nil {
          out.RawString("null")
        } else {
          (*v6).MarshalEasyJSON(out)
        }
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RangeCondition) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RangeCondition) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RangeCondition) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson1(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RangeCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson1(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson2(in *jlexer.Lexer, out *Range) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "id":
      out.ID = int64(in.Int64())
    case "min":
      out.Min = int64(in.Int64())
    case "max":
      out.Max = int64(in.Int64())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson2(out *jwriter.Writer, in Range) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"id\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.ID))
  }
  {
    const prefix string = ",\"min\":"
    out.RawString(prefix)
    out.Int64(int64(in.Min))
  }
  {
    const prefix string = ",\"max\":"
    out.RawString(prefix)
    out.Int64(int64(in.Max))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Range) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson2(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Range) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Range) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson2(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Range) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson2(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson3(in *jlexer.Lexer, out *MySQLConnectionEnv) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "Host":
      out.Host = string(in.String())
    case "Port":
      out.Port = string(in.String())
    case "User":
      out.User = string(in.String())
    case "DBName":
      out.DBName = string(in.String())
    case "Password":
      out.Password = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson3(out *jwriter.Writer, in MySQLConnectionEnv) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"Host\":"
    out.RawString(prefix[1:])
    out.String(string(in.Host))
  }
  {
    const prefix string = ",\"Port\":"
    out.RawString(prefix)
    out.String(string(in.Port))
  }
  {
    const prefix string = ",\"User\":"
    out.RawString(prefix)
    out.String(string(in.User))
  }
  {
    const prefix string = ",\"DBName\":"
    out.RawString(prefix)
    out.String(string(in.DBName))
  }
  {
    const prefix string = ",\"Password\":"
    out.RawString(prefix)
    out.String(string(in.Password))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MySQLConnectionEnv) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson3(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MySQLConnectionEnv) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MySQLConnectionEnv) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson3(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MySQLConnectionEnv) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson3(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson4(in *jlexer.Lexer, out *ListCondition) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "list":
      if in.IsNull() {
        in.Skip()
        out.List = nil
      } else {
        in.Delim('[')
        if out.List == nil {
          if !in.IsDelim(']') {
            out.List = make([]string, 0, 4)
          } else {
            out.List = []string{}
          }
        } else {
          out.List = (out.List)[:0]
        }
        for !in.IsDelim(']') {
          var v7 string
          v7 = string(in.String())
          out.List = append(out.List, v7)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson4(out *jwriter.Writer, in ListCondition) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"list\":"
    out.RawString(prefix[1:])
    if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v8, v9 := range in.List {
        if v8 > 0 {
          out.RawByte(',')
        }
        out.String(string(v9))
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListCondition) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson4(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListCondition) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListCondition) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson4(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson4(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson5(in *jlexer.Lexer, out *InitializeResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "language":
      out.Language = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson5(out *jwriter.Writer, in InitializeResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"language\":"
    out.RawString(prefix[1:])
    out.String(string(in.Language))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitializeResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson5(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitializeResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitializeResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson5(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitializeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson5(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson6(in *jlexer.Lexer, out *EstateSearchResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "count":
      out.Count = int64(in.Int64())
    case "estates":
      if in.IsNull() {
        in.Skip()
        out.Estates = nil
      } else {
        in.Delim('[')
        if out.Estates == nil {
          if !in.IsDelim(']') {
            out.Estates = make([]Estate, 0, 0)
          } else {
            out.Estates = []Estate{}
          }
        } else {
          out.Estates = (out.Estates)[:0]
        }
        for !in.IsDelim(']') {
          var v10 Estate
          (v10).UnmarshalEasyJSON(in)
          out.Estates = append(out.Estates, v10)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson6(out *jwriter.Writer, in EstateSearchResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"count\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.Count))
  }
  {
    const prefix string = ",\"estates\":"
    out.RawString(prefix)
    if in.Estates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v11, v12 := range in.Estates {
        if v11 > 0 {
          out.RawByte(',')
        }
        (v12).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstateSearchResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson6(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstateSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstateSearchResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson6(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstateSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson6(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson7(in *jlexer.Lexer, out *EstateSearchCondition) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "doorWidth":
      (out.DoorWidth).UnmarshalEasyJSON(in)
    case "doorHeight":
      (out.DoorHeight).UnmarshalEasyJSON(in)
    case "rent":
      (out.Rent).UnmarshalEasyJSON(in)
    case "feature":
      (out.Feature).UnmarshalEasyJSON(in)
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson7(out *jwriter.Writer, in EstateSearchCondition) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"doorWidth\":"
    out.RawString(prefix[1:])
    (in.DoorWidth).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"doorHeight\":"
    out.RawString(prefix)
    (in.DoorHeight).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"rent\":"
    out.RawString(prefix)
    (in.Rent).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"feature\":"
    out.RawString(prefix)
    (in.Feature).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstateSearchCondition) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson7(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstateSearchCondition) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstateSearchCondition) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson7(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstateSearchCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson7(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson8(in *jlexer.Lexer, out *EstateListResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "estates":
      if in.IsNull() {
        in.Skip()
        out.Estates = nil
      } else {
        in.Delim('[')
        if out.Estates == nil {
          if !in.IsDelim(']') {
            out.Estates = make([]Estate, 0, 0)
          } else {
            out.Estates = []Estate{}
          }
        } else {
          out.Estates = (out.Estates)[:0]
        }
        for !in.IsDelim(']') {
          var v13 Estate
          (v13).UnmarshalEasyJSON(in)
          out.Estates = append(out.Estates, v13)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson8(out *jwriter.Writer, in EstateListResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"estates\":"
    out.RawString(prefix[1:])
    if in.Estates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v14, v15 := range in.Estates {
        if v14 > 0 {
          out.RawByte(',')
        }
        (v15).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EstateListResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson8(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EstateListResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EstateListResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson8(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EstateListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson8(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson9(in *jlexer.Lexer, out *Estate) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "id":
      out.ID = int64(in.Int64())
    case "thumbnail":
      out.Thumbnail = string(in.String())
    case "name":
      out.Name = string(in.String())
    case "description":
      out.Description = string(in.String())
    case "latitude":
      out.Latitude = float64(in.Float64())
    case "longitude":
      out.Longitude = float64(in.Float64())
    case "address":
      out.Address = string(in.String())
    case "rent":
      out.Rent = int64(in.Int64())
    case "doorHeight":
      out.DoorHeight = int64(in.Int64())
    case "doorWidth":
      out.DoorWidth = int64(in.Int64())
    case "features":
      out.Features = string(in.String())
    case "Latlon":
      out.Latlon = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson9(out *jwriter.Writer, in Estate) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"id\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.ID))
  }
  {
    const prefix string = ",\"thumbnail\":"
    out.RawString(prefix)
    out.String(string(in.Thumbnail))
  }
  {
    const prefix string = ",\"name\":"
    out.RawString(prefix)
    out.String(string(in.Name))
  }
  {
    const prefix string = ",\"description\":"
    out.RawString(prefix)
    out.String(string(in.Description))
  }
  {
    const prefix string = ",\"latitude\":"
    out.RawString(prefix)
    out.Float64(float64(in.Latitude))
  }
  {
    const prefix string = ",\"longitude\":"
    out.RawString(prefix)
    out.Float64(float64(in.Longitude))
  }
  {
    const prefix string = ",\"address\":"
    out.RawString(prefix)
    out.String(string(in.Address))
  }
  {
    const prefix string = ",\"rent\":"
    out.RawString(prefix)
    out.Int64(int64(in.Rent))
  }
  {
    const prefix string = ",\"doorHeight\":"
    out.RawString(prefix)
    out.Int64(int64(in.DoorHeight))
  }
  {
    const prefix string = ",\"doorWidth\":"
    out.RawString(prefix)
    out.Int64(int64(in.DoorWidth))
  }
  {
    const prefix string = ",\"features\":"
    out.RawString(prefix)
    out.String(string(in.Features))
  }
  {
    const prefix string = ",\"Latlon\":"
    out.RawString(prefix)
    out.String(string(in.Latlon))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Estate) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson9(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Estate) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Estate) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson9(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Estate) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson9(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson10(in *jlexer.Lexer, out *Coordinates) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "coordinates":
      if in.IsNull() {
        in.Skip()
        out.Coordinates = nil
      } else {
        in.Delim('[')
        if out.Coordinates == nil {
          if !in.IsDelim(']') {
            out.Coordinates = make([]Coordinate, 0, 4)
          } else {
            out.Coordinates = []Coordinate{}
          }
        } else {
          out.Coordinates = (out.Coordinates)[:0]
        }
        for !in.IsDelim(']') {
          var v16 Coordinate
          (v16).UnmarshalEasyJSON(in)
          out.Coordinates = append(out.Coordinates, v16)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson10(out *jwriter.Writer, in Coordinates) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"coordinates\":"
    out.RawString(prefix[1:])
    if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v17, v18 := range in.Coordinates {
        if v17 > 0 {
          out.RawByte(',')
        }
        (v18).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coordinates) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson10(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coordinates) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coordinates) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson10(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coordinates) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson10(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson11(in *jlexer.Lexer, out *Coordinate) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "latitude":
      out.Latitude = float64(in.Float64())
    case "longitude":
      out.Longitude = float64(in.Float64())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson11(out *jwriter.Writer, in Coordinate) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"latitude\":"
    out.RawString(prefix[1:])
    out.Float64(float64(in.Latitude))
  }
  {
    const prefix string = ",\"longitude\":"
    out.RawString(prefix)
    out.Float64(float64(in.Longitude))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coordinate) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson11(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coordinate) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coordinate) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson11(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coordinate) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson11(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson12(in *jlexer.Lexer, out *ChairSearchResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "count":
      out.Count = int64(in.Int64())
    case "chairs":
      if in.IsNull() {
        in.Skip()
        out.Chairs = nil
      } else {
        in.Delim('[')
        if out.Chairs == nil {
          if !in.IsDelim(']') {
            out.Chairs = make([]Chair, 0, 0)
          } else {
            out.Chairs = []Chair{}
          }
        } else {
          out.Chairs = (out.Chairs)[:0]
        }
        for !in.IsDelim(']') {
          var v19 Chair
          (v19).UnmarshalEasyJSON(in)
          out.Chairs = append(out.Chairs, v19)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson12(out *jwriter.Writer, in ChairSearchResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"count\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.Count))
  }
  {
    const prefix string = ",\"chairs\":"
    out.RawString(prefix)
    if in.Chairs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v20, v21 := range in.Chairs {
        if v20 > 0 {
          out.RawByte(',')
        }
        (v21).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChairSearchResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson12(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChairSearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChairSearchResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson12(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChairSearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson12(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson13(in *jlexer.Lexer, out *ChairSearchCondition) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "width":
      (out.Width).UnmarshalEasyJSON(in)
    case "height":
      (out.Height).UnmarshalEasyJSON(in)
    case "depth":
      (out.Depth).UnmarshalEasyJSON(in)
    case "price":
      (out.Price).UnmarshalEasyJSON(in)
    case "color":
      (out.Color).UnmarshalEasyJSON(in)
    case "feature":
      (out.Feature).UnmarshalEasyJSON(in)
    case "kind":
      (out.Kind).UnmarshalEasyJSON(in)
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson13(out *jwriter.Writer, in ChairSearchCondition) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"width\":"
    out.RawString(prefix[1:])
    (in.Width).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"height\":"
    out.RawString(prefix)
    (in.Height).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"depth\":"
    out.RawString(prefix)
    (in.Depth).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"price\":"
    out.RawString(prefix)
    (in.Price).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"color\":"
    out.RawString(prefix)
    (in.Color).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"feature\":"
    out.RawString(prefix)
    (in.Feature).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"kind\":"
    out.RawString(prefix)
    (in.Kind).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChairSearchCondition) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson13(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChairSearchCondition) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChairSearchCondition) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson13(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChairSearchCondition) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson13(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson14(in *jlexer.Lexer, out *ChairListResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "chairs":
      if in.IsNull() {
        in.Skip()
        out.Chairs = nil
      } else {
        in.Delim('[')
        if out.Chairs == nil {
          if !in.IsDelim(']') {
            out.Chairs = make([]Chair, 0, 0)
          } else {
            out.Chairs = []Chair{}
          }
        } else {
          out.Chairs = (out.Chairs)[:0]
        }
        for !in.IsDelim(']') {
          var v22 Chair
          (v22).UnmarshalEasyJSON(in)
          out.Chairs = append(out.Chairs, v22)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson14(out *jwriter.Writer, in ChairListResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"chairs\":"
    out.RawString(prefix[1:])
    if in.Chairs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v23, v24 := range in.Chairs {
        if v23 > 0 {
          out.RawByte(',')
        }
        (v24).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChairListResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson14(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChairListResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChairListResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson14(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChairListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson14(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson15(in *jlexer.Lexer, out *Chair) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "id":
      out.ID = int64(in.Int64())
    case "name":
      out.Name = string(in.String())
    case "description":
      out.Description = string(in.String())
    case "thumbnail":
      out.Thumbnail = string(in.String())
    case "price":
      out.Price = int64(in.Int64())
    case "height":
      out.Height = int64(in.Int64())
    case "width":
      out.Width = int64(in.Int64())
    case "depth":
      out.Depth = int64(in.Int64())
    case "color":
      out.Color = string(in.String())
    case "features":
      out.Features = string(in.String())
    case "kind":
      out.Kind = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson15(out *jwriter.Writer, in Chair) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"id\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.ID))
  }
  {
    const prefix string = ",\"name\":"
    out.RawString(prefix)
    out.String(string(in.Name))
  }
  {
    const prefix string = ",\"description\":"
    out.RawString(prefix)
    out.String(string(in.Description))
  }
  {
    const prefix string = ",\"thumbnail\":"
    out.RawString(prefix)
    out.String(string(in.Thumbnail))
  }
  {
    const prefix string = ",\"price\":"
    out.RawString(prefix)
    out.Int64(int64(in.Price))
  }
  {
    const prefix string = ",\"height\":"
    out.RawString(prefix)
    out.Int64(int64(in.Height))
  }
  {
    const prefix string = ",\"width\":"
    out.RawString(prefix)
    out.Int64(int64(in.Width))
  }
  {
    const prefix string = ",\"depth\":"
    out.RawString(prefix)
    out.Int64(int64(in.Depth))
  }
  {
    const prefix string = ",\"color\":"
    out.RawString(prefix)
    out.String(string(in.Color))
  }
  {
    const prefix string = ",\"features\":"
    out.RawString(prefix)
    out.String(string(in.Features))
  }
  {
    const prefix string = ",\"kind\":"
    out.RawString(prefix)
    out.String(string(in.Kind))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chair) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson15(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chair) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chair) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson15(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chair) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson15(l, v)
}
func easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson16(in *jlexer.Lexer, out *BoundingBox) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeFieldName(false)
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "TopLeftCorner":
      (out.TopLeftCorner).UnmarshalEasyJSON(in)
    case "BottomRightCorner":
      (out.BottomRightCorner).UnmarshalEasyJSON(in)
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson16(out *jwriter.Writer, in BoundingBox) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"TopLeftCorner\":"
    out.RawString(prefix[1:])
    (in.TopLeftCorner).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"BottomRightCorner\":"
    out.RawString(prefix)
    (in.BottomRightCorner).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoundingBox) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson16(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoundingBox) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson42239ddeEncodeGithubComIsuconIsucon10QualifyIsuumoJson16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoundingBox) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson16(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoundingBox) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson42239ddeDecodeGithubComIsuconIsucon10QualifyIsuumoJson16(l, v)
}
